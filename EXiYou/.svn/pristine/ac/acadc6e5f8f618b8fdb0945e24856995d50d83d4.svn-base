package jcp.com.exiyou.base.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.squareup.picasso.Picasso;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jcp.com.exiyou.R;


/**
 * Created by SweetDream on 2017/2/27.
 */

public abstract class BaseListViewAdapter<T> extends BaseAdapter {
    private List<T> mData;
    private LayoutInflater mInflater;
    private int[] layoutIds;
    private String mType;

    public BaseListViewAdapter(Context context, String mType, List<T> mData, int... layoutIds) {
        if (mData != null) {
            this.mData = mData;
        } else {
            this.mData = new ArrayList<>();
        }
        this.mType = mType;
        this.mInflater = LayoutInflater.from(context);
        this.layoutIds = layoutIds;
    }

    public void addRes(List<T> data) {
        if (data != null) {
            this.mData.addAll(data);
            notifyDataSetChanged();
        }
    }

    public void updateRes(List<T> data) {
        if (data != null) {
            this.mData.clear();
            this.mData.addAll(data);
            notifyDataSetChanged();
        }
    }

    @Override
    public int getCount() {
        return mData != null ? mData.size() : 0;
    }

    @Override
    public T getItem(int position) {
        return mData.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public int getItemViewType(int position) {
        int type = 0;
        T t = getItem(position);
        Class<?> cls = t.getClass();
        if (mType != null) {
            try {
                Field field = cls.getDeclaredField(mType);
                // 添加访问权限
                field.setAccessible(true);
                type = field.getInt(t);
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        return type;
    }

    @Override
    public int getViewTypeCount() {
        return layoutIds.length;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        if (convertView == null) {
            convertView = mInflater.inflate(layoutIds[getItemViewType(position)], parent, false);
            holder = new ViewHolder(convertView);
            convertView.setTag(holder);
        } else {
            holder = ((ViewHolder) convertView.getTag());
        }
        loadData(holder, getItem(position), position);

        return convertView;
    }

    protected abstract void loadData(ViewHolder holder, T item, int position);

    public static class ViewHolder {
        private View initView;
        private Map<Integer, View> cacheViews;

        public ViewHolder(View initView) {
            this.initView = initView;
            cacheViews = new HashMap<>();
        }

        public View findView(int resId) {
            View view = null;
            if (cacheViews.containsKey(resId)) {
                view = cacheViews.get(resId);
            } else {
                view = initView.findViewById(resId);
                cacheViews.put(resId, view);
            }
            return view;
        }

        public void setText(int resId, String text) {
            ((TextView) findView(resId)).setText(text);
        }

        public void setImage(Context context,int resId, String imagePath) {
            ImageView imageView = (ImageView) findView(resId);
            if (imagePath==null||imagePath.equals("")){
                imageView.setImageResource(R.mipmap.ic_def_user_big_stroke);
            }else {
                Picasso.with(context).load(imagePath).into(imageView);
            }

        }


    }
}
